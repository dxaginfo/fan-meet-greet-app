version: '3.8'

services:
  # Frontend React Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_SOCKET_URL=http://localhost:5000
      - NODE_ENV=development
    networks:
      - app-network

  # Backend Node.js Application
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/fan_meet_greet
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - CLIENT_URL=http://localhost:3000
      - STRIPE_SECRET_KEY=your_stripe_secret_key_here
      - STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_here
      - AWS_ACCESS_KEY_ID=your_aws_access_key_id_here
      - AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key_here
      - AWS_REGION=us-east-1
      - S3_BUCKET=fan-meet-greet-media
      - SENDGRID_API_KEY=your_sendgrid_api_key_here
      - SENDGRID_FROM_EMAIL=noreply@fanmeetgreet.com
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid_here
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token_here
      - TWILIO_PHONE_NUMBER=your_twilio_phone_number_here
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fan_meet_greet
    networks:
      - app-network

  # Redis for Caching and Real-time Communication
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Elasticsearch for Advanced Searching
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025" # SMTP Server
      - "8025:8025" # Web UI
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:

networks:
  app-network:
    driver: bridge